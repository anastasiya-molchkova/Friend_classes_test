/* 
Точка в геометрии — это позиция в пространстве. Мы можем определить точку в 3D-пространстве как набор координат x, y и z. 
Например, Point(0.0, 1.0, 2.0) будет точкой в ​​координатном пространстве x = 0.0, y = 1.0 и z = 2.0.

Вектор в физике — это величина, которая имеет длину и направление (но не положение). Мы можем определить вектор в 3D-пространстве через значения x, y и z, 
представляющие направление вектора вдоль осей x, y и z. 
Например, Vector(1.0, 0.0, 0.0) будет вектором, представляющим направление только вдоль положительной оси x длиной 1.0.

Вектор может применятся к Точке для перемещения Точки на новую позицию. Это делается путём добавления направления вектора к позиции Точки. 
Например, Point(0.0, 1.0, 2.0) + Vector(0.0, 2.0, 0.0) даст Точку (0.0, 3.0, 2.0).
*/

//___________________________________________________________________________________________________________________________________________________
//Задание 1: Сделайте класс Point3D дружественным классу Vector3D и реализуйте метод moveByVector() в классе Point3D.
/*
#include <iostream>
// класс Вектор
class Vector3D
{
private:
	double m_x, m_y, m_z;

public:
	// конструктор класса при создании объекта даёт возможность задать координаты вектора
	Vector3D(double x = 0.0, double y = 0.0, double z = 0.0)
		: m_x(x), m_y(y), m_z(z) //вот собственно инициализация
	{}
	//функция печати координат вектора
	void print()
	{
		std::cout << "Vector(" << m_x << " , " << m_y << " , " << m_z << ")\n";
	}
	//объявляем класс Точка как дружественный:
	friend class Point3D;
};

//класс Точка
class Point3D
{
private:
	double m_x, m_y, m_z;

public:
	// конструктор класса при создании объекта даёт возможность задать координаты точки
	Point3D(double x = 0.0, double y = 0.0, double z = 0.0)
		: m_x(x), m_y(y), m_z(z)
	{}
	//функция печати координат точки
	void print()
	{
		std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
	}
	//функция перемещения точки с помощью вектора (объекта класса Вектор, переданного по константной ссылке)
	void moveByVector(const Vector3D& v)
	{
		m_x += v.m_x;
		m_y += v.m_y;
		m_z += v.m_z;
	}
};
*/

//___________________________________________________________________________________________________________________________________________________
//Задание 2: Вместо того, чтобы класс Point3D был дружественным классу Vector3D, сделайте метод Point3D::moveByVector() дружественным классу Vector3D.
/*
#include <iostream>
//объявляем класс Вектор:
class Vector3D;

//класс Точка
class Point3D
{
private:
	double m_x, m_y, m_z;

public:
	// конструктор класса при создании объекта даёт возможность задать координаты точки
	Point3D(double x = 0.0, double y = 0.0, double z = 0.0)
		: m_x(x), m_y(y), m_z(z)
	{}
	//функция печати координат точки
	void print()
	{
		std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
	}
	//объявление вынесенного наружу метода:
	void moveByVector(const Vector3D& v);
};

// класс Вектор
class Vector3D
{
private:
	double m_x, m_y, m_z;

public:
	// конструктор класса при создании объекта даёт возможность задать координаты вектора
	Vector3D(double x = 0.0, double y = 0.0, double z = 0.0)
		: m_x(x), m_y(y), m_z(z) //вот собственно инициализация
	{}
	//функция печати координат вектора
	void print()
	{
		std::cout << "Vector(" << m_x << " , " << m_y << " , " << m_z << ")\n";
	}
	//объявляем дружественный метод из класса Точка:
	friend void Point3D::moveByVector(const Vector3D& v);
};

//определение вынесенного метода из класса Точка перемещения точки с помощью вектора (объекта класса Вектор, переданного по константной ссылке)
void Point3D::moveByVector(const Vector3D& v)
{
	m_x += v.m_x;
	m_y += v.m_y;
	m_z += v.m_z;
}
*/

//Задание 3: Переделайте свой ответ из Задания 2, используя 5 отдельных файлов: Point3D.h, Point3D.cpp, Vector3D.h, Vector3D.cpp и main.cpp.
//___________________________________________________________________________________________________________________________________________________
#include "Point3D.h"
#include "Vector3D.h"
//___________________________________________________________________________________________________________________________________________________

int main()
{
	Point3D p(3.0, 4.0, 5.0);
	Vector3D v(3.0, 3.0, -2.0);

	p.print();
	p.moveByVector(v);
	p.print();

	return 0;
}